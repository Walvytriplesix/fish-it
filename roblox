local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Create GUI Window (mobile-friendly size, no tab dropdown, slightly transparent)
local Window = WindUI:CreateWindow({
    Title = "Walvy Community - Fish It",
    Icon = "rbxassetid://127851653377757",
    IconThemed = true,
    Author = "VERSION: VIP",
    Folder = "Walvy-Community",
    Size = UDim2.new(0, 380, 0, 260), -- âœ… Lebih kecil biar pas di Android
    Theme = "Dark" -- Bisa ganti "Light" kalau silau
})

-- Info Tab
local InfoTab = Window:Tab({ Title = "Info", Icon = "info" })

InfoTab:Paragraph({
    Title = "Welcome to Walvy Community",
    Desc = "Version Game: Fish it.",
    Image = "rbxassetid://121989361864413",
    ImageSize = 30,
    Thumbnail = "rbxassetid://85693098195372",
    ThumbnailSize = 170
})

InfoTab:Button({
    Title = "Join Our Discord",
    Desc = "Click to copy our Discord invite link.",
    Callback = function()
        setclipboard("https://discord.gg/kWC8Nn7kne")
        WindUI:Notify({
            Title = "Discord",
            Content = "Discord invite link copied to clipboard!",
            Duration = 5
        })
    end
})

-- Auto Farm Tab
local AutofarmTab = Window:Tab({ 
    Title = "Auto Farm", 
    Icon = "fish"
})

-- ===== Auto Fish Toggle =====
local autoFishEnabled = false
local delayTime = 3 -- Delay between fishing attempts

local autoFishToggle = AutofarmTab:Toggle({
    Title = "Auto Fish",
    Desc = "Automatically fish and instant fishing",
    Value = false,
    Callback = function(state)
        autoFishEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto Fish",
                Content = "Enabled",
                Duration = 3
            })

            task.spawn(function()
                while autoFishEnabled do
                    local success, err = pcall(function()
                        local ReplicatedStorage = game:GetService("ReplicatedStorage")
                        local EquipRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/EquipToolFromHotbar"]
                        local StartMinigame = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/RequestFishingMinigameStarted"]
                        local ChargeRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/ChargeFishingRod"]

                        -- Auto equip rod (slot 1)
                        EquipRod:FireServer(1)
                        task.wait(0.1)

                        -- Start mini game
                        StartMinigame:InvokeServer(-0.7499996423721313, 1)
                        task.wait(0.1)

                        -- Charge rod
                        ChargeRod:InvokeServer(workspace:GetServerTimeNow())
                        task.wait(0.1)

                        -- Request mini game again to ensure
                        StartMinigame:InvokeServer(-0.7499996423721313, 1)
                    end)

                    if not success then
                        warn("Auto Fish error:", err)
                    end

                    task.wait(delayTime)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Fish",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- ===== Auto Instant Fish Toggle =====
local autoInstantFishEnabled = false

local autoInstantFishToggle = AutofarmTab:Toggle({
    Title = "Auto Instant Fish",
    Desc = "Automatically completes fishing instantly",
    Value = false,
    Callback = function(state)
        autoInstantFishEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto Instant Fish",
                Content = "Enabled",
                Duration = 3
            })

            task.spawn(function()
                while autoInstantFishEnabled do
                    local success, err = pcall(function()
                        local ReplicatedStorage = game:GetService("ReplicatedStorage")
                        local REFishingCompleted = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/FishingCompleted"]
                        REFishingCompleted:FireServer()
                    end)
                    if not success then
                        warn("Auto Instant Fish error:", err)
                    end
                    task.wait(0.1)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Instant Fish",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- ===== Auto Sell Button =====
local sellAllButton = AutofarmTab:Button({
    Title = "Sell All Fish",
    Desc = "Click to sell all your items instantly",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RFSellAllItems = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/SellAllItems"]

        pcall(function()
            RFSellAllItems:InvokeServer()
        end)

        WindUI:Notify({
            Title = "Auto Sell",
            Content = "All items sold!",
            Duration = 3
        })
    end
})

AutofarmTab:Paragraph({
    Title = "ANTI KICK",
})

-- [[ Variable to control back-and-forth movement ]]
local moveForward = true

local antiKickToggle = AutofarmTab:Toggle({
    Title = "Anti Kick",
    Value = false,
    Callback = function(state)
        local player = game.Players.LocalPlayer

        if state then
            -- [Method 1: Reactive] Use VirtualUser when idle is detected
            _G.AntiKickConnection = player.Idled:Connect(function()
                local vu = game:GetService("VirtualUser")
                vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                task.wait(0.1) -- short delay
                vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            end)

            -- [Method 2: Proactive] Jump + small movement loop
            _G.AutoJumpEnabled = true
            task.spawn(function()
                while _G.AutoJumpEnabled do
                    task.wait(5) -- Interval can be adjusted, 5-10s is safe

                    if not _G.AutoJumpEnabled then break end -- Extra check to stop the loop

                    local char = player.Character
                    if char then
                        local humanoid = char:FindFirstChild("Humanoid")
                        local hrp = char:FindFirstChild("HumanoidRootPart")
                        
                        -- Jump action
                        if humanoid and humanoid.Health > 0 then
                            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                        end
                        
                        -- Back-and-forth small movement
                        if hrp then
                            if moveForward then
                                hrp.CFrame = hrp.CFrame * CFrame.new(0.1, 0, 0)
                            else
                                hrp.CFrame = hrp.CFrame * CFrame.new(-0.1, 0, 0)
                            end
                            moveForward = not moveForward -- Reverse direction for next execution
                        end
                    end
                end
            end)

            WindUI:Notify({
                Title = "Anti-Kick",
                Content = "Enabled: AFK protection active.",
                Duration = 3
            })
        else
            -- Disable all connections and loops
            if _G.AntiKickConnection then
                _G.AntiKickConnection:Disconnect()
                _G.AntiKickConnection = nil
            end
            _G.AutoJumpEnabled = false

            WindUI:Notify({
                Title = "Anti-Kick",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- Anti-Kick v2: Modern, smaller movement, safer interval
local antiKickv2Toggle = AutofarmTab:Toggle({
    Title = "Anti Kick v2",
    Value = false,
    Callback = function(state)
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer

        -- Default interval in seconds
        local interval = 5  

        if state then
            -- Anti-AFK VirtualUser
            _G.AntiKickConnection = player.Idled:Connect(function()
                local vu = game:GetService("VirtualUser")
                vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            end)

            -- Auto jump + small movement loop
            _G.AutoJumpEnabled = true
            spawn(function()
                while _G.AutoJumpEnabled do
                    task.wait(interval)
                    local char = player.Character or player.CharacterAdded:Wait()
                    local humanoid = char:FindFirstChild("Humanoid")
                    local hrp = char:FindFirstChild("HumanoidRootPart")
                    if humanoid and humanoid.Health > 0 then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                    if hrp then
                        hrp.CFrame = hrp.CFrame * CFrame.new(0.05,0,0) -- smaller movement but still active
                    end
                end
            end)

            WindUI:Notify({
                Title = "Anti-Kick v2",
                Content = "Enabled: AFK-safe with interval "..interval.."s",
                Duration = 3
            })
        else
            -- Disable loop & disconnect Idled
            if _G.AntiKickConnection then
                _G.AntiKickConnection:Disconnect()
                _G.AntiKickConnection = nil
            end
            _G.AutoJumpEnabled = false

            WindUI:Notify({
                Title = "Anti-Kick v2",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- Teleport Tab
local TpTab = Window:Tab({  
    Title = "Teleport",  
    Icon = "map-pin"
})

-- Daftar lokasi teleport
local teleportLocations = {
    {Title = "Kohana Lava", Position = Vector3.new(-593.32, 59.0, 130.82)},
    {Title = "Esotoric Island", Position = Vector3.new(2024.490, 27.397, 1391.620)},
    {Title = "Kohana", Position = Vector3.new(-630.300, 16.035, 597.480)},
    {Title = "Lost Isle", Position = Vector3.new(-3660.070, 5.426, -1053.020)},
    {Title = "Stingray Shores", Position = Vector3.new(45.280, 28.000, 2987.110)},
    {Title = "Tropical Grove", Position = Vector3.new(-2092.897, 6.268, 3693.929)},
    {Title = "Weather Machine", Position = Vector3.new(-1495.250, 6.500, 1889.920)},
    {Title = "Coral Reefs", Position = Vector3.new(-2949.359, 63.250, 2213.966)},
    {Title = "Crater Island", Position = Vector3.new(1012.045, 22.676, 5080.221)},
    {Title = "Teleport To Enchant", Position = Vector3.new(3236.120, -1302.855, 1399.491)}
}

-- Buat list nama untuk dropdown
local locationNames = {}
for _, loc in ipairs(teleportLocations) do
    table.insert(locationNames, loc.Title)
end

-- Default selected location
local selectedLocation = locationNames[1]

-- Paragraph
TpTab:Paragraph({
    Title = "Teleport To Island",
    Desc = "Select a location and press Teleport."
})

-- Dropdown Teleport
local teleportDropdown = TpTab:Dropdown({
    Title = "Select Location",
    Values = locationNames,
    Value = selectedLocation,
    Callback = function(value)
        selectedLocation = value
        WindUI:Notify({Title="Location Selected", Content=value, Duration=3})
    end
})

-- Tombol Teleport
TpTab:Button({
    Title = "Teleport To Island",
    Icon = "rbxassetid://85151307796718",
    Callback = function()
        if selectedLocation then
            local loc
            for _, l in ipairs(teleportLocations) do
                if l.Title == selectedLocation then
                    loc = l
                    break
                end
            end

            if loc then
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local hrp = character:WaitForChild("HumanoidRootPart")
                hrp.CFrame = CFrame.new(loc.Position)
                WindUI:Notify({Title="Teleported", Content="Teleported to "..loc.Title, Duration=3})
            end
        end
    end
})

TpTab:Paragraph({
    Title = "Teleport To Other Player",
    Desc = "Select Name Player And Press Teleport"
})

-- Teleport to Player Tab
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local selectedPlayer = nil
local playerDropdown = nil -- reference dropdown

-- Fungsi refresh dropdown
local function refreshPlayerDropdown()
    -- Hapus dropdown lama jika ada
    if playerDropdown then
        playerDropdown:Remove()
    end

    -- Buat daftar player baru
    local playerNames = {}
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            table.insert(playerNames, plr.Name)
        end
    end

    -- Default selected player
    if #playerNames > 0 then
        if not table.find(playerNames, selectedPlayer) then
            selectedPlayer = playerNames[1]
        end
    else
        selectedPlayer = nil
    end

    -- Buat dropdown baru
    playerDropdown = TpTab:Dropdown({
        Title = "Select Player",
        Values = playerNames,
        Value = selectedPlayer,
        Callback = function(value)
            selectedPlayer = value
            WindUI:Notify({Title="Player Selected", Content=value, Duration=3})
        end
    })
end

-- Buat dropdown pertama kali sebelum tombol
refreshPlayerDropdown()

-- Tombol Teleport di bawah dropdown
TpTab:Button({
    Title = "Telepor To Other Player",
    Callback = function()
        if selectedPlayer then
            local targetPlayer = Players:FindFirstChild(selectedPlayer)
            local myChar = LocalPlayer.Character
            local hrp = myChar and myChar:FindFirstChild("HumanoidRootPart")
            local targetChar = targetPlayer and targetPlayer.Character
            local targetHRP = targetChar and targetChar:FindFirstChild("HumanoidRootPart")

            if hrp and targetHRP then
                hrp.CFrame = targetHRP.CFrame + Vector3.new(0,5,0)
                WindUI:Notify({Title="Teleported", Content="Teleported to "..selectedPlayer, Duration=3})
            end
        end
    end
})

-- Loop refresh dropdown tiap detik (tombol tetap di bawah)
spawn(function()
    while true do
        wait(1)
        refreshPlayerDropdown()
    end
end)

TpTab:Paragraph({
    Title = "Saved & Load, Location",
    Desc = "Saved Potition And Load Potition"
})

-- ===== Load Config =====
local savedConfig
if Window.ConfigManager then
    savedConfig = Window.ConfigManager:CreateConfig("Walvy Community"):Load()
end

-- ===== Default Values =====
local defaultTheme = (savedConfig and savedConfig.Theme) or WindUI:GetCurrentTheme()
local defaultTransparency = (savedConfig and savedConfig.TransparentMode ~= nil) and savedConfig.TransparentMode or true

-- ===== Saved Position =====
local savedPosition
if savedConfig and savedConfig.SavedPosition then
    local pos = savedConfig.SavedPosition
    if pos.X and pos.Y and pos.Z then
        savedPosition = Vector3.new(pos.X, pos.Y, pos.Z)
    end
end

-- Tombol Save Position
TpTab:Button({
    Title = "Save Position",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        savedPosition = hrp.Position

        -- Simpan ke Config
        if Window.ConfigManager then
            local config = Window.ConfigManager:CreateConfig("Walvy Community")
            config:Set("SavedPosition", {X = savedPosition.X, Y = savedPosition.Y, Z = savedPosition.Z})
            config:Save()
        end

        WindUI:Notify({Title="Position Saved", Content=tostring(savedPosition), Duration=3})
    end
})

-- Tombol Load Saved Position (hanya jalan kalau ditekan)
TpTab:Button({
    Title = "Load Saved Position",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        if savedPosition then
            hrp.CFrame = CFrame.new(savedPosition)
            WindUI:Notify({Title="Loaded Saved Position", Content=tostring(savedPosition), Duration=3})
        else
            WindUI:Notify({Title="Info", Content="No saved position found, please save first.", Duration=3})
        end
    end
})

-- Spawn Boat Tab
local SpawnBoatTab = Window:Tab({  
    Title = "Spawn Boat",  
    Icon = "ship"
})

-- Boat Types
local boatTypes = {
    {Title = "Small Boat", Id = 1},
    {Title = "Kayak", Id = 2},
    {Title = "Jetski", Id = 3},
    {Title = "Highfield", Id = 4},
    {Title = "Speed Boat", Id = 5},
    {Title = "Fishing Boat", Id = 6},
    {Title = "Mini Yacht", Id = 14},
    {Title = "Hyper Boat", Id = 7},
    {Title = "Frozen Boat", Id = 11},
    {Title = "Cruiser Boat", Id = 13}
}

-- Buat list nama untuk dropdown
local boatNames = {}
for _, boat in ipairs(boatTypes) do
    table.insert(boatNames, boat.Title)
end

-- Default selected boat
local selectedBoat = boatNames[1]

-- Paragraph
SpawnBoatTab:Paragraph({
    Title = "Spawn Boats",
    Desc = "Select a boat from dropdown and press Spawn."
})

-- Dropdown Boat
SpawnBoatTab:Dropdown({
    Title = "Select Boat",
    Values = boatNames,
    Value = selectedBoat,
    Callback = function(value)
        selectedBoat = value
        WindUI:Notify({Title="Boat Selected", Content=value, Duration=3})
    end
})

-- Tombol Spawn
SpawnBoatTab:Button({
    Title = "Spawn Boat",
    Icon = "ship",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RFSpawnBoat = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/SpawnBoat"]
        if RFSpawnBoat then
            -- Cari ID boat yang sesuai nama
            local boatId
            for _, boat in ipairs(boatTypes) do
                if boat.Title == selectedBoat then
                    boatId = boat.Id
                    break
                end
            end

            if boatId then
                local success, err = pcall(function()
                    RFSpawnBoat:InvokeServer(boatId)
                end)
                if success then
                    WindUI:Notify({Title="Boat Spawned", Content=selectedBoat, Duration=3})
                else
                    WindUI:Notify({Title="Spawn Error", Content=tostring(err), Duration=5})
                end
            else
                WindUI:Notify({Title="Spawn Error", Content="Boat ID not found!", Duration=5})
            end
        end
    end
})

-- Buy Rod Tab
local BuyRodTab = Window:Tab({  
    Title = "Shop",  
    Icon = "shopping-cart"
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RFPurchaseFishingRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseFishingRod"]
local RFPurchaseBait = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseBait"]
local RFPurchaseWeatherEvent = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseWeatherEvent"]

-- ===== Rod Data =====
local rods = {
    ["Luck Rod"] = 79,
    ["Carbon Rod"] = 76,
    ["Grass Rod"] = 85,
    ["Demascus Rod"] = 77,
    ["Ice Rod"] = 78,
    ["Lucky Rod"] = 4,
    ["Midnight Rod"] = 80,
    ["Steampunk Rod"] = 6,
    ["Chrome Rod"] = 7,
    ["Astral Rod"] = 5,
    ["Ares Rod"] = 126,
    ["Angler Rod"] = 168
}

-- Dropdown display names (nama + harga)
local rodNames = {
    "Luck Rod ($350)", "Carbon Rod ($900)", "Grass Rod ($1.5k)", "Demascus Rod ($3k)",
    "Ice Rod ($5k)", "Lucky Rod ($15k)", "Midnight Rod ($50k)", "Steampunk Rod ($215k)",
    "Chrome Rod ($437k)", "Astral Rod ($1M)", "Ares Rod ($3M)", "Angler Rod ($8M)"
}

-- Mapping dari display name ke key asli
local rodKeyMap = {
    ["Luck Rod ($350)"]="Luck Rod",
    ["Carbon Rod ($900)"]="Carbon Rod",
    ["Grass Rod ($1.5k)"]="Grass Rod",
    ["Demascus Rod ($3k)"]="Demascus Rod",
    ["Ice Rod ($5k)"]="Ice Rod",
    ["Lucky Rod ($15k)"]="Lucky Rod",
    ["Midnight Rod ($50k)"]="Midnight Rod",
    ["Steampunk Rod ($215k)"]="Steampunk Rod",
    ["Chrome Rod ($437k)"]="Chrome Rod",
    ["Astral Rod ($1M)"]="Astral Rod",
    ["Ares Rod ($3M)"]="Ares Rod",
    ["Angler Rod ($8M)"]="Angler Rod"
}

local selectedRod = rodNames[1]

-- ===== Dropdown =====
BuyRodTab:Dropdown({
    Title = "Select Rod",
    Values = rodNames,
    Value = selectedRod,
    Callback = function(value)
        selectedRod = value
        WindUI:Notify({Title="Rod Selected", Content=value, Duration=3})
    end
})

-- ===== Tombol Buy Rod =====
BuyRodTab:Button({
    Title="Buy Rod",
    Callback=function()
        local key = rodKeyMap[selectedRod] -- ambil key asli
        if key and rods[key] then
            local success, err = pcall(function()
                RFPurchaseFishingRod:InvokeServer(rods[key])
            end)
            if success then
                WindUI:Notify({Title="Rod Purchase", Content="Purchased "..selectedRod, Duration=3})
            else
                WindUI:Notify({Title="Rod Purchase Error", Content=tostring(err), Duration=5})
            end
        end
    end
})

-- ===== Bait Data =====
local baits = {
    ["TopWater Bait"] = 10,
    ["Lucky Bait"] = 2,
    ["Midnight Bait"] = 3,
    ["Chroma Bait"] = 6,
    ["Dark Mater Bait"] = 8,
    ["Corrupt Bait"] = 15,
    ["Aether Bait"] = 16
}

-- Dropdown display names (nama + harga)
local baitNames = {
    "TopWater Bait ($100)",
    "Lucky Bait ($1k)",
    "Midnight Bait ($3k)",
    "Chroma Bait ($290k)",
    "Dark Mater Bait ($630k)",
    "Corrupt Bait ($1.15M)",
    "Aether Bait ($3.7M)"
}

-- Mapping display name -> key asli
local baitKeyMap = {
    ["TopWater Bait ($100)"] = "TopWater Bait",
    ["Lucky Bait ($1k)"] = "Lucky Bait",
    ["Midnight Bait ($3k)"] = "Midnight Bait",
    ["Chroma Bait ($290k)"] = "Chroma Bait",
    ["Dark Mater Bait ($630k)"] = "Dark Mater Bait",
    ["Corrupt Bait ($1.15M)"] = "Corrupt Bait",
    ["Aether Bait ($3.7M)"] = "Aether Bait"
}

local selectedBait = baitNames[1]

-- ===== Paragraph =====
BuyRodTab:Paragraph({
    Title = "Buy Bait",
    Desc = "Select a bait to purchase."
})

-- ===== Dropdown =====
BuyRodTab:Dropdown({
    Title="Select Bait",
    Values=baitNames,
    Value=selectedBait,
    Callback=function(value)
        selectedBait = value
        WindUI:Notify({
            Title="Bait Selected",
            Content=value,
            Duration=3
        })
    end
})

-- ===== Tombol Buy Bait =====
BuyRodTab:Button({
    Title="Buy Bait",
    Callback=function()
        local key = baitKeyMap[selectedBait] -- ambil key asli
        if key and baits[key] then
            local amount = baits[key]
            local success, err = pcall(function()
                RFPurchaseBait:InvokeServer(amount)
            end)
            if success then
                WindUI:Notify({
                    Title="Bait Purchase",
                    Content="Purchased "..selectedBait.." x"..amount,
                    Duration=3
                })
            else
                WindUI:Notify({
                    Title="Bait Purchase Error",
                    Content=tostring(err),
                    Duration=5
                })
            end
        end
    end
})

-- ===== Weather Data =====
local weathers = {
    ["Wind"] = 10000,
    ["Snow"] = 20000,
    ["Cloudy"] = 15000,
    ["Storm"] = 35000,
    ["Radiant"] = 50000,
    ["Shark Hunt"] = 300000
}

-- Dropdown display names (nama + harga)
local weatherNames = {
    "Wind ($10k)", "Snow ($20k)", "Cloudy ($15k)", "Storm ($35k)",
    "Radiant ($50k)", "Shark Hunt ($300k)"
}

-- Mapping display name -> key asli
local weatherKeyMap = {
    ["Wind ($10k)"] = "Wind",
    ["Snow ($20k)"] = "Snow",
    ["Cloudy ($15k)"] = "Cloudy",
    ["Storm ($35k)"] = "Storm",
    ["Radiant ($50k)"] = "Radiant",
    ["Shark Hunt ($300k)"] = "Shark Hunt"
}

local selectedWeather = weatherNames[1]

-- ===== Paragraph =====
BuyRodTab:Paragraph({
    Title="Buy Weather",
    Desc="Select a weather to purchase."
})

-- ===== Dropdown =====
BuyRodTab:Dropdown({
    Title="Select Weather",
    Values=weatherNames,
    Value=selectedWeather,
    Callback=function(value)
        selectedWeather = value
        local price = weathers[weatherKeyMap[value]]
        WindUI:Notify({
            Title="Weather Selected",
            Content=value,
            Duration=3
        })
    end
})

-- ===== Tombol Buy Weather =====
BuyRodTab:Button({
    Title="Buy Weather",
    Callback=function()
        local key = weatherKeyMap[selectedWeather] -- ambil key asli
        if key and weathers[key] then
            local price = weathers[key]
            local success, err = pcall(function()
                RFPurchaseWeatherEvent:InvokeServer(key)
            end)
            if success then
                WindUI:Notify({
                    Title="Weather Purchase",
                    Content="Purchased "..selectedWeather,
                    Duration=3
                })
            else
                WindUI:Notify({
                    Title="Weather Purchase Error",
                    Content=tostring(err),
                    Duration=5
                })
            end
        end
    end
})

local karakterTab = Window:Tab({  
    Title = "User",  
    Icon = "user-plus"
})

karakterTab:Paragraph({
    Title = "Change Ability Your Character",
})

-- ===== Speed Hack Slider =====
karakterTab:Slider({
    Title = "Speed Hack",
    Value = {
        Min = 16,
        Max = 200,
        Default = 16
    },
    Callback = function(value)
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = value
        end
        WindUI:Notify({
            Title = "Speed Hack",
            Content = "WalkSpeed set to "..value,
            Duration = 2
        })
    end
})

karakterTab:Button({
    Title = "Reset SpeedHack",
    Desc = "Kembalikan ke kecepatan normal",
    Callback = function()
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
        end
        WindUI:Notify({
            Title = "SpeedHack Reset",
            Content = "WalkSpeed dikembalikan ke normal (16)",
            Duration = 2
        })
    end
})

-- ===== Infinity Jump Toggle (Android-friendly) =====
karakterTab:Toggle({
    Title = "Infinity Jump",
    Desc = "Jump infinitely (Android compatible)",
    Value = false,
    Callback = function(state)
        _G.InfinityJumpEnabled = state

        if state then
            -- Loop check humanoid state instead of JumpRequest
            _G.InfinityJumpConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local player = game.Players.LocalPlayer
                local char = player.Character or player.CharacterAdded:Wait()
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid and humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
            WindUI:Notify({Title = "Infinity Jump", Content = "Enabled", Duration = 3})
        else
            if _G.InfinityJumpConnection then
                _G.InfinityJumpConnection:Disconnect()
                _G.InfinityJumpConnection = nil
            end
            WindUI:Notify({Title = "Infinity Jump", Content = "Disabled", Duration = 3})
        end
    end
})

-- ===== Noclip Toggle =====
local noclipEnabled = false
karakterTab:Toggle({
    Title = "Noclip",
    Desc = "Bisa menembus objek",
    Value = false,
    Callback = function(state)
        noclipEnabled = state
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()

        if state then
            _G.NoclipConnection = game:GetService("RunService").RenderStepped:Connect(function()
                if char then
                    for _, part in ipairs(char:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            WindUI:Notify({Title="Noclip", Content="Enabled", Duration=2})
        else
            if _G.NoclipConnection then
                _G.NoclipConnection:Disconnect()
                _G.NoclipConnection = nil
            end
            if char then
                for _, part in ipairs(char:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            WindUI:Notify({Title="Noclip", Content="Disabled", Duration=2})
        end
    end
})


local walkOnWaterEnabled = false
local floatHeight = 3
local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")

-- Simpan reference BodyPosition & connection
local bp, floatConnection

local function setupFloat()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")

    -- BodyPosition untuk mengatur posisi Y
    bp = Instance.new("BodyPosition")
    bp.MaxForce = Vector3.new(0, math.huge, 0)
    bp.D = 15
    bp.P = 2000
    bp.Position = hrp.Position
    bp.Parent = hrp

    -- Loop RenderStepped untuk update posisi
    floatConnection = runService.RenderStepped:Connect(function(delta)
        if walkOnWaterEnabled and hrp and hrp.Parent then
            local ray = Ray.new(hrp.Position, Vector3.new(0, -50, 0))
            local part, pos = workspace:FindPartOnRay(ray, char)
            if part and (part.Material == Enum.Material.Water or part.Name:lower():find("lava")) then
                bp.Position = Vector3.new(hrp.Position.X, pos.Y + floatHeight, hrp.Position.Z)
            else
                -- Kalau bukan air/lava, biarkan jatuh normal
                bp.Position = hrp.Position
            end
        end
    end)
end

-- Toggle di karakterTab
karakterTab:Toggle({
    Title = "Fly Little",
    Desc = "Raise your character a little and make your character float",
    Value = false,
    Callback = function(state)
        walkOnWaterEnabled = state
        local char = player.Character or player.CharacterAdded:Wait()
        local hrp = char:WaitForChild("HumanoidRootPart")

        if state then
            setupFloat()
            WindUI:Notify({Title="Walk On Water", Content="Enabled", Duration=2})
        else
            if floatConnection then
                floatConnection:Disconnect()
                floatConnection = nil
            end
            if bp then
                bp:Destroy()
                bp = nil
            end
            WindUI:Notify({Title="Walk On Water", Content="Disabled", Duration=2})
        end
    end
})

-- Settings Tab
local SettingsTab = Window:Tab({ Title = "Settings", Icon = "settings" })

-- Paragraph Info
SettingsTab:Paragraph({
    Title = "Interface",
    Desc = "Customize your GUI appearance."
})

-- Ambil semua theme yang tersedia
local themes = {}
for themeName,_ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

-- Load saved config (jika ada)
local savedConfig
if Window.ConfigManager then
    savedConfig = Window.ConfigManager:CreateConfig("Walvy Community"):Load()
end

-- Tentukan default values
local defaultTheme = (savedConfig and savedConfig.Theme) or WindUI:GetCurrentTheme()
local defaultTransparency = (savedConfig and savedConfig.TransparentMode ~= nil) and savedConfig.TransparentMode or true

-- Theme Dropdown
local themeDropdown = SettingsTab:Dropdown({
    Title = "Select Theme",
    Values = themes,
    Value = defaultTheme,
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "Theme Applied",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })

        -- Auto-save theme
        if Window.ConfigManager then
            local config = Window.ConfigManager:CreateConfig("Walvy Community")
            config:Set("Theme", theme)
            config:Set("TransparentMode", Window.TransparencyEnabled) -- simpan transparency juga
            config:Save()
        end
    end
})

-- Toggle Transparency
local transparentToggle = SettingsTab:Toggle({
    Title = "Transparency",
    Desc = "Makes the interface slightly transparent.",
    Value = defaultTransparency,
    Callback = function(state)
        Window:ToggleTransparency(state)
        WindUI.TransparencyValue = state and 0.1 or 1
        WindUI:Notify({
            Title = "Transparency",
            Content = state and "Transparency ON" or "Transparency OFF",
            Duration = 2
        })

        -- Auto-save transparency
        if Window.ConfigManager then
            local config = Window.ConfigManager:CreateConfig("Walvy Community")
            config:Set("Theme", WindUI:GetCurrentTheme()) -- simpan theme juga
            config:Set("TransparentMode", state)
            config:Save()
        end
    end
})

-- Apply default values saat GUI load
WindUI:SetTheme(defaultTheme)
Window:ToggleTransparency(defaultTransparency)
WindUI.TransparencyValue = defaultTransparency and 0.1 or 1

-- Optional: paragraph untuk info
SettingsTab:Paragraph({
    Title = "Configuration",
    Desc = "Theme and Transparency are auto-saved and auto-loaded."
})

local configName = ""

SettingsTab:Input({
    Title = "Config Name",
    Placeholder = "Enter config name",
    Callback = function(text)
        configName = text
    end
})

SettingsTab:Button({
    Title = "Save Config",
    Desc = "Save current theme and transparency",
    Callback = function()
        if configName ~= "" then
            local config = Window.ConfigManager:CreateConfig(configName)
            config:Register("Theme", themeDropdown)
            config:Register("Transparency", transparentToggle)
            config:Save()
            WindUI:Notify({
                Title = "Config Saved",
                Content = configName,
                Duration = 3
            })
        end
    end
})

SettingsTab:Button({
    Title = "Load Config",
    Desc = "Load saved configuration",
    Callback = function()
        if configName ~= "" then
            local config = Window.ConfigManager:CreateConfig(configName)
            local data = config:Load()
            if data then
                if data.Theme and table.find(themes, data.Theme) then
                    themeDropdown:Select(data.Theme)
                    WindUI:SetTheme(data.Theme)
                end
                if data.Transparency ~= nil then
                    transparentToggle:Set(data.Transparency)
                    Window:ToggleTransparency(data.Transparency)
                    WindUI.TransparencyValue = data.Transparency and 0.1 or 1
                end
                WindUI:Notify({
                    Title = "Config Loaded",
                    Content = configName,
                    Duration = 3
                })
            else
                WindUI:Notify({
                    Title = "Config Error",
                    Content = "Config file not found",
                    Duration = 3
                })
            end
        end
    end
})

local filesDropdown
local function listConfigFiles()
    local files = {}
    local path = "WindUI/" .. Window.Folder .. "/config"
    if not isfolder(path) then
        makefolder(path)
    end
    for _, file in ipairs(listfiles(path)) do
        local name = file:match("([^/]+)%.json$")
        if name then table.insert(files, name) end
    end
    return files
end

filesDropdown = SettingsTab:Dropdown({
    Title = "Select Config",
    Values = listConfigFiles(),
    Multi = false,
    AllowNone = true,
    Callback = function(selection)
        configName = selection
    end
})

SettingsTab:Button({
    Title = "Refresh List",
    Callback = function()
        filesDropdown:Refresh(listConfigFiles())
    end
})

-- Select first tab on GUI open
Window:SelectTab(1)
