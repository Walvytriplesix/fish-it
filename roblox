local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Create GUI Window (mobile-friendly size, no tab dropdown, slightly transparent)
local Window = WindUI:CreateWindow({
    Title = "Walvy Community - Fish it",
    Icon = "rbxassetid://85151307796718",
    IconThemed = true,
    Author = "VERSION: Vip",
    Folder = "Walvy-Community-Fish-It",
    Size = UDim2.fromOffset(350, 450),
    Theme = "Dark",
    SideBarWidth = 150,
    Transparent = true, -- Enable transparency by default
    Center = true,
    Draggable = true,
    UseTabSelector = false
})

-- Info Tab
local InfoTab = Window:Tab({ Title = "Info", Icon = "info" })

InfoTab:Paragraph({
    Title = "Welcome to Walvy Community",
    Desc = "Version Game: Fish it.",
    Image = "rbxassetid://85693098195372",
    ImageSize = 30,
    Thumbnail = "rbxassetid://85693098195372",
    ThumbnailSize = 210
})

InfoTab:Paragraph({
    Title = "Join our Discord!",
    Desc = "Click the button below to copy the invite link to our community."
})

InfoTab:Button({
    Title = "Join Our Discord",
    Desc = "Click to copy our Discord invite link.",
    Callback = function()
        setclipboard("https://discord.gg/kWC8Nn7kne")
        WindUI:Notify({
            Title = "Discord",
            Content = "Discord invite link copied to clipboard!",
            Duration = 5
        })
    end
})

-- Auto Farm Tab
local AutofarmTab = Window:Tab({ 
    Title = "Auto Farm", 
    Icon = "fish"
})

-- ===== Auto Fish Toggle =====
local autoFishEnabled = false
local delayTime = 3 -- Delay between fishing attempts

local autoFishToggle = AutofarmTab:Toggle({
    Title = "Auto Fish",
    Desc = "Automatically fish and instant fishing",
    Value = false,
    Callback = function(state)
        autoFishEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto Fish",
                Content = "Enabled",
                Duration = 3
            })

            task.spawn(function()
                while autoFishEnabled do
                    local success, err = pcall(function()
                        local ReplicatedStorage = game:GetService("ReplicatedStorage")
                        local EquipRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/EquipToolFromHotbar"]
                        local StartMinigame = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/RequestFishingMinigameStarted"]
                        local ChargeRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/ChargeFishingRod"]

                        -- Auto equip rod (slot 1)
                        EquipRod:FireServer(1)
                        task.wait(0.1)

                        -- Start mini game
                        StartMinigame:InvokeServer(-0.7499996423721313, 1)
                        task.wait(0.1)

                        -- Charge rod
                        ChargeRod:InvokeServer(workspace:GetServerTimeNow())
                        task.wait(0.1)

                        -- Request mini game again to ensure
                        StartMinigame:InvokeServer(-0.7499996423721313, 1)
                    end)

                    if not success then
                        warn("Auto Fish error:", err)
                    end

                    task.wait(delayTime)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Fish",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- ===== Auto Instant Fish Toggle =====
local autoInstantFishEnabled = false

local autoInstantFishToggle = AutofarmTab:Toggle({
    Title = "Auto Instant Fish",
    Desc = "Automatically completes fishing instantly",
    Value = false,
    Callback = function(state)
        autoInstantFishEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto Instant Fish",
                Content = "Enabled",
                Duration = 3
            })

            task.spawn(function()
                while autoInstantFishEnabled do
                    local success, err = pcall(function()
                        local ReplicatedStorage = game:GetService("ReplicatedStorage")
                        local REFishingCompleted = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/FishingCompleted"]
                        REFishingCompleted:FireServer()
                    end)
                    if not success then
                        warn("Auto Instant Fish error:", err)
                    end
                    task.wait(0.1)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Instant Fish",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- ===== Auto Sell Button =====
local sellAllButton = AutofarmTab:Button({
    Title = "Sell All Fish",
    Desc = "Click to sell all your items instantly",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RFSellAllItems = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/SellAllItems"]

        pcall(function()
            RFSellAllItems:InvokeServer()
        end)

        WindUI:Notify({
            Title = "Auto Sell",
            Content = "All items sold!",
            Duration = 3
        })
    end
})

local changestatsTab = Window:Tab({  
    Title = "Edit Stats",  
    Icon = "file-text" -- ganti dengan icon sesuai keinginan
})

-- Visual Stats
changestatsTab:Paragraph({
    Title = "Edit Visual Stats",
    Desc = "Modify your rod stats below."
})

-- Fishing Luck
local fishingLuckInput = changestatsTab:Input({
    Title = "Fishing Luck",
    Placeholder = "Enter a number (e.g., 100)",
    Callback = function(value)
        _G.FishingLuck = tonumber(value) or 0
    end
})

changestatsTab:Button({
    Title = "Set Fishing Luck",
    Callback = function()
        if _G.FishingLuck then
            local success, err = pcall(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local SetFishingLuck = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/SetFishingLuck"]
                SetFishingLuck:FireServer(_G.FishingLuck)
            end)
            if success then
                WindUI:Notify({Title="Fishing Luck", Content="Fishing Luck applied!", Duration=3})
            else
                warn("Failed to set Fishing Luck:", err)
            end
        end
    end
})

-- Shiny Chance
local shinyChanceInput = changestatsTab:Input({
    Title = "Shiny Chance",
    Placeholder = "Enter a number (e.g., 100)",
    Callback = function(value)
        _G.ShinyChance = tonumber(value) or 0
    end
})

changestatsTab:Button({
    Title = "Set Shiny Chance",
    Callback = function()
        if _G.ShinyChance then
            local success, err = pcall(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local SetShinyChance = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/SetShinyChance"]
                SetShinyChance:FireServer(_G.ShinyChance)
            end)
            if success then
                WindUI:Notify({Title="Shiny Chance", Content="Shiny Chance applied!", Duration=3})
            else
                warn("Failed to set Shiny Chance:", err)
            end
        end
    end
})

-- Mutation Chance
local mutationChanceInput = changestatsTab:Input({
    Title = "Mutation Chance",
    Placeholder = "Enter a number (e.g., 100)",
    Callback = function(value)
        _G.MutationChance = tonumber(value) or 0
    end
})

changestatsTab:Button({
    Title = "Set Mutation Chance",
    Callback = function()
        if _G.MutationChance then
            local success, err = pcall(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local SetMutationChance = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/SetMutationChance"]
                SetMutationChance:FireServer(_G.MutationChance)
            end)
            if success then
                WindUI:Notify({Title="Mutation Chance", Content="Mutation Chance applied!", Duration=3})
            else
                warn("Failed to set Mutation Chance:", err)
            end
        end
    end
})

-- Rod Modifier
changestatsTab:Paragraph({
    Title = "Rod Modifier",
    Desc = "Apply max stats to your currently equipped skinned rod."
})

changestatsTab:Button({
    Title = "Apply Max Stats to Skinned Rod",
    Callback = function()
        local success, err = pcall(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local ApplyMaxRodStats = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/ApplyMaxRodStats"]
            ApplyMaxRodStats:FireServer()
        end)
        if success then
            WindUI:Notify({Title="Rod Modifier", Content="Max stats applied!", Duration=3})
        else
            warn("Failed to apply max stats:", err)
        end
    end
})

-- Teleport Tab
local TpTab = Window:Tab({  
    Title = "Teleport To Island",  
    Icon = "map-pin"
})

-- Daftar lokasi teleport
local teleportLocations = {
    {Title = "Kohana Lava", Position = Vector3.new(-593.32, 59.0, 130.82)},
    {Title = "Esotoric Island", Position = Vector3.new(2024.490, 27.397, 1391.620)},
    {Title = "Kohana", Position = Vector3.new(-630.300, 16.035, 597.480)},
    {Title = "Lost Isle", Position = Vector3.new(-3660.070, 5.426, -1053.020)},
    {Title = "Stingray Shores", Position = Vector3.new(45.280, 28.000, 2987.110)},
    {Title = "Tropical Grove", Position = Vector3.new(-2092.897, 6.268, 3693.929)},
    {Title = "Weather Machine", Position = Vector3.new(-1495.250, 6.500, 1889.920)},
    {Title = "Coral Reefs", Position = Vector3.new(-2949.359, 63.250, 2213.966)},
    {Title = "Crater Island", Position = Vector3.new(1012.045, 22.676, 5080.221)},
    {Title = "Teleport To Enchant", Position = Vector3.new(3236.120, -1302.855, 1399.491)}
}

-- Buat list nama untuk dropdown
local locationNames = {}
for _, loc in ipairs(teleportLocations) do
    table.insert(locationNames, loc.Title)
end

-- Default selected location
local selectedLocation = locationNames[1]

-- Paragraph
TpTab:Paragraph({
    Title = "Teleport",
    Desc = "Select a location from dropdown and press Teleport."
})

-- Dropdown Teleport
local teleportDropdown = TpTab:Dropdown({
    Title = "Select Location",
    Values = locationNames,
    Value = selectedLocation,
    Callback = function(value)
        selectedLocation = value
        WindUI:Notify({Title="Location Selected", Content=value, Duration=3})
    end
})

-- Tombol Teleport
TpTab:Button({
    Title = "Teleport",
    Icon = "rbxassetid://85151307796718",
    Callback = function()
        if selectedLocation then
            local loc
            for _, l in ipairs(teleportLocations) do
                if l.Title == selectedLocation then
                    loc = l
                    break
                end
            end

            if loc then
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local hrp = character:WaitForChild("HumanoidRootPart")
                hrp.CFrame = CFrame.new(loc.Position)
                WindUI:Notify({Title="Teleported", Content="Teleported to "..loc.Title, Duration=3})
            end
        end
    end
})

-- Teleport to Player Tab
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local ScannerTab = Window:Tab({
    Title = "Teleport To Player",
    Icon = "user-search"
})

local selectedPlayer = nil
local playerDropdown = nil -- reference dropdown

-- Fungsi refresh dropdown
local function refreshPlayerDropdown()
    -- Hapus dropdown lama jika ada
    if playerDropdown then
        playerDropdown:Remove()
    end

    -- Buat daftar player baru
    local playerNames = {}
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            table.insert(playerNames, plr.Name)
        end
    end

    -- Default selected player
    if #playerNames > 0 then
        if not table.find(playerNames, selectedPlayer) then
            selectedPlayer = playerNames[1]
        end
    else
        selectedPlayer = nil
    end

    -- Buat dropdown baru
    playerDropdown = ScannerTab:Dropdown({
        Title = "Select Player",
        Values = playerNames,
        Value = selectedPlayer,
        Callback = function(value)
            selectedPlayer = value
            WindUI:Notify({Title="Player Selected", Content=value, Duration=3})
        end
    })
end

-- Buat dropdown pertama kali sebelum tombol
refreshPlayerDropdown()

-- Tombol Teleport di bawah dropdown
ScannerTab:Button({
    Title = "Teleport",
    Callback = function()
        if selectedPlayer then
            local targetPlayer = Players:FindFirstChild(selectedPlayer)
            local myChar = LocalPlayer.Character
            local hrp = myChar and myChar:FindFirstChild("HumanoidRootPart")
            local targetChar = targetPlayer and targetPlayer.Character
            local targetHRP = targetChar and targetChar:FindFirstChild("HumanoidRootPart")

            if hrp and targetHRP then
                hrp.CFrame = targetHRP.CFrame + Vector3.new(0,5,0)
                WindUI:Notify({Title="Teleported", Content="Teleported to "..selectedPlayer, Duration=3})
            end
        end
    end
})

-- Loop refresh dropdown tiap detik (tombol tetap di bawah)
spawn(function()
    while true do
        wait(1)
        refreshPlayerDropdown()
    end
end)

-- Variable untuk simpan posisi
local savedPosition = nil

-- Tombol Save Position
ScannerTab:Button({
    Title = "Save Position",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        savedPosition = hrp.Position
        WindUI:Notify({Title="Position Saved", Content=tostring(savedPosition), Duration=3})
    end
})

-- Tombol Load Saved Position
ScannerTab:Button({
    Title = "Load Saved Position",
    Callback = function()
        if savedPosition then
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local hrp = character:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(savedPosition)
            WindUI:Notify({Title="Loaded Saved Position", Content=tostring(savedPosition), Duration=3})
        else
            WindUI:Notify({Title="Error", Content="No saved position found!", Duration=3})
        end
    end
})

-- Spawn Boat Tab
local SpawnBoatTab = Window:Tab({  
    Title = "Spawn Boat",  
    Icon = "ship"
})

-- Boat Types
local boatTypes = {
    {Title = "Small Boat", Id = 1},
    {Title = "Kayak", Id = 2},
    {Title = "Jetski", Id = 3},
    {Title = "Highfield", Id = 4},
    {Title = "Speed Boat", Id = 5},
    {Title = "Fishing Boat", Id = 6},
    {Title = "Mini Yacht", Id = 14},
    {Title = "Hyper Boat", Id = 7},
    {Title = "Frozen Boat", Id = 11},
    {Title = "Cruiser Boat", Id = 13}
}

-- Buat list nama untuk dropdown
local boatNames = {}
for _, boat in ipairs(boatTypes) do
    table.insert(boatNames, boat.Title)
end

-- Default selected boat
local selectedBoat = boatNames[1]

-- Paragraph
SpawnBoatTab:Paragraph({
    Title = "Spawn Boats",
    Desc = "Select a boat from dropdown and press Spawn."
})

-- Dropdown Boat
SpawnBoatTab:Dropdown({
    Title = "Select Boat",
    Values = boatNames,
    Value = selectedBoat,
    Callback = function(value)
        selectedBoat = value
        WindUI:Notify({Title="Boat Selected", Content=value, Duration=3})
    end
})

-- Tombol Spawn
SpawnBoatTab:Button({
    Title = "Spawn Boat",
    Icon = "ship",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RFSpawnBoat = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/SpawnBoat"]
        if RFSpawnBoat then
            -- Cari ID boat yang sesuai nama
            local boatId
            for _, boat in ipairs(boatTypes) do
                if boat.Title == selectedBoat then
                    boatId = boat.Id
                    break
                end
            end

            if boatId then
                local success, err = pcall(function()
                    RFSpawnBoat:InvokeServer(boatId)
                end)
                if success then
                    WindUI:Notify({Title="Boat Spawned", Content=selectedBoat, Duration=3})
                else
                    WindUI:Notify({Title="Spawn Error", Content=tostring(err), Duration=5})
                end
            else
                WindUI:Notify({Title="Spawn Error", Content="Boat ID not found!", Duration=5})
            end
        end
    end
})

-- Buy Rod Tab
local BuyRodTab = Window:Tab({  
    Title = "Buy Rod & Weather & Bait",  
    Icon = "shopping-cart"
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RFPurchaseFishingRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseFishingRod"]
local RFPurchaseBait = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseBait"]
local RFPurchaseWeatherEvent = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseWeatherEvent"]

-- ===== Rod =====
local rods = {
    ["Luck Rod"] = 79, ["Carbon Rod"] = 76, ["Grass Rod"] = 85,
    ["Demascus Rod"] = 77, ["Ice Rod"] = 78, ["Lucky Rod"] = 4,
    ["Midnight Rod"] = 80, ["Steampunk Rod"] = 6, ["Chrome Rod"] = 7,
    ["Astral Rod"] = 5, ["Ares Rod"] = 126, ["Angler Rod"] = 168
}
local rodNames = {}
for name,_ in pairs(rods) do table.insert(rodNames, name) end
local selectedRod = rodNames[1]

BuyRodTab:Paragraph({Title="Buy Rod", Desc="Select a rod to purchase."})

BuyRodTab:Dropdown({
    Title = "Select Rod",
    Values = rodNames,
    Value = selectedRod,
    Callback = function(value)
        selectedRod = value
        WindUI:Notify({Title="Rod Selected", Content=value, Duration=3})
    end
})

BuyRodTab:Button({
    Title="Buy Rod",
    Callback=function()
        if selectedRod and rods[selectedRod] then
            local success, err = pcall(function()
                RFPurchaseFishingRod:InvokeServer(rods[selectedRod])
            end)
            if success then
                WindUI:Notify({Title="Rod Purchase", Content="Purchased "..selectedRod, Duration=3})
            else
                WindUI:Notify({Title="Rod Purchase Error", Content=tostring(err), Duration=5})
            end
        end
    end
})

local baitNames = {
    "TopWater Bait",
    "Lucky Bait",
    "Midnight Bait",
    "Chroma Bait",
    "Dark Mater Bait",
    "Corrupt Bait",
    "Aether Bait"
}

-- Mapping bait ke jumlah / ID
local baits = {
    ["TopWater Bait"]=10,
    ["Lucky Bait"]=2,
    ["Midnight Bait"]=3,
    ["Chroma Bait"]=6,
    ["Dark Mater Bait"]=8,
    ["Corrupt Bait"]=15,
    ["Aether Bait"]=16
}

-- Default selected bait
local selectedBait = baitNames[1]

-- Paragraph Buy Bait
BuyRodTab:Paragraph({
    Title = "Buy Bait",
    Desc = "Select a bait to purchase."
})

-- Dropdown Bait sesuai urutan
BuyRodTab:Dropdown({
    Title="Select Bait",
    Values=baitNames,
    Value=selectedBait,
    Callback=function(value)
        selectedBait = value
        WindUI:Notify({Title="Bait Selected", Content=value, Duration=3})
    end
})

-- Tombol Buy Bait
BuyRodTab:Button({
    Title="Buy Bait",
    Callback=function()
        if selectedBait and baits[selectedBait] then
            local success, err = pcall(function()
                RFPurchaseBait:InvokeServer(baits[selectedBait])
            end)
            if success then
                WindUI:Notify({Title="Bait Purchase", Content="Purchased "..selectedBait.." x"..baits[selectedBait], Duration=3})
            else
                WindUI:Notify({Title="Bait Purchase Error", Content=tostring(err), Duration=5})
            end
        end
    end
})

-- ===== Weather =====
local weathers = {"Wind", "Snow", "Cloudy", "Storm", "Radiant", "Shark Hunt"}
local selectedWeather = weathers[1]

BuyRodTab:Paragraph({Title="Buy Weather", Desc="Select a weather to purchase."})

BuyRodTab:Dropdown({
    Title="Select Weather",
    Values=weathers,
    Value=selectedWeather,
    Callback=function(value)
        selectedWeather = value
        WindUI:Notify({Title="Weather Selected", Content=value, Duration=3})
    end
})

BuyRodTab:Button({
    Title="Buy Weather",
    Callback=function()
        if selectedWeather then
            local success, err = pcall(function()
                RFPurchaseWeatherEvent:InvokeServer(selectedWeather)
            end)
            if success then
                WindUI:Notify({Title="Weather Purchase", Content="Purchased "..selectedWeather, Duration=3})
            else
                WindUI:Notify({Title="Weather Purchase Error", Content=tostring(err), Duration=5})
            end
        end
    end
})

-- Anti Kick Tab
local AntiKickTab = Window:Tab({  
    Title = "Anti Kick",  
    Icon = "shield"
})

local antiKickToggle = AntiKickTab:Toggle({
    Title = "Anti Kick",
    Desc = "Every 10 seconds, the player will jump to prevent AFK kick.",
    Value = false,
    Callback = function(state)
        local player = game.Players.LocalPlayer

        if state then
            -- Anti-AFK
            _G.AntiKickConnection = player.Idled:Connect(function()
                local vu = game:GetService("VirtualUser")
                vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            end)

            -- Auto Jump loop menggunakan Humanoid
            _G.AutoJumpEnabled = true
            spawn(function()
                while _G.AutoJumpEnabled do
                    task.wait(10)
                    local char = player.Character or player.CharacterAdded:Wait()
                    local humanoid = char:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end)

            WindUI:Notify({
                Title = "Anti-Kick + Auto Jump",
                Content = "Enabled: Anti-Kick active and jumping every 10 seconds",
                Duration = 3
            })
        else
            if _G.AntiKickConnection then
                _G.AntiKickConnection:Disconnect()
                _G.AntiKickConnection = nil
            end
            _G.AutoJumpEnabled = false

            WindUI:Notify({
                Title = "Anti-Kick + Auto Jump",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- Settings Tab
local SettingsTab = Window:Tab({ Title = "Settings", Icon = "settings" })

SettingsTab:Paragraph({
    Title = "Interface",
    Desc = "Customize your GUI appearance."
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = SettingsTab:Dropdown({
    Title = "Select Theme",
    Values = themes,
    Value = WindUI:GetCurrentTheme(),
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "Theme Applied",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
        if Window.ConfigManager then
            local config = Window.ConfigManager:CreateConfig("transparent_autoload")
            config:Set("Theme", theme)
            config:Save()
        end
    end
})

local transparentToggle = SettingsTab:Toggle({
    Title = "Transparency",
    Desc = "Makes the interface slightly transparent.",
    Value = true,
    Callback = function(state)
        Window:ToggleTransparency(state)
        WindUI.TransparencyValue = state and 0.1 or 1 -- Slightly transparent when ON
        WindUI:Notify({
            Title = "Transparency",
            Content = state and "Transparency ON" or "Transparency OFF",
            Duration = 2
        })
        if Window.ConfigManager then
            local config = Window.ConfigManager:CreateConfig("transparent_autoload")
            config:Set("TransparentMode", state)
            config:Save()
        end
    end
})

task.spawn(function()
    if Window.ConfigManager then
        local config = Window.ConfigManager:CreateConfig("transparent_autoload")
        local data = config:Load()
        local transparencyState = data and data.TransparentMode or true
        local themeState = data and data.Theme or WindUI:GetCurrentTheme()

        -- Apply transparency
        transparentToggle:Set(transparencyState)
        Window:ToggleTransparency(transparencyState)
        WindUI.TransparencyValue = transparencyState and 0.1 or 1

        -- Apply theme
        if themeState and table.find(themes, themeState) then
            themeDropdown:Select(themeState)
            WindUI:SetTheme(themeState)
            print("Auto-loaded theme: " .. themeState)
        else
            themeDropdown:Select(WindUI:GetCurrentTheme())
            print("No valid saved theme, using default: " .. WindUI:GetCurrentTheme())
        end
    else
        transparentToggle:Set(true)
        Window:ToggleTransparency(true)
        WindUI.TransparencyValue = 0.1
        themeDropdown:Select(WindUI:GetCurrentTheme())
        print("No ConfigManager, using default theme and transparency")
    end
end)

SettingsTab:Paragraph({
    Title = "Configuration",
    Desc = "Type your config name and select config below."
})

local configName = ""

SettingsTab:Input({
    Title = "Config Name",
    Placeholder = "Enter config name",
    Callback = function(text)
        configName = text
    end
})

SettingsTab:Button({
    Title = "Save Config",
    Desc = "Save current theme and transparency",
    Callback = function()
        if configName ~= "" then
            local config = Window.ConfigManager:CreateConfig(configName)
            config:Register("Theme", themeDropdown)
            config:Register("Transparency", transparentToggle)
            config:Save()
            WindUI:Notify({
                Title = "Config Saved",
                Content = configName,
                Duration = 3
            })
        end
    end
})

SettingsTab:Button({
    Title = "Load Config",
    Desc = "Load saved configuration",
    Callback = function()
        if configName ~= "" then
            local config = Window.ConfigManager:CreateConfig(configName)
            local data = config:Load()
            if data then
                if data.Theme and table.find(themes, data.Theme) then
                    themeDropdown:Select(data.Theme)
                    WindUI:SetTheme(data.Theme)
                end
                if data.Transparency ~= nil then
                    transparentToggle:Set(data.Transparency)
                    Window:ToggleTransparency(data.Transparency)
                    WindUI.TransparencyValue = data.Transparency and 0.9 or 1
                end
                WindUI:Notify({
                    Title = "Config Loaded",
                    Content = configName,
                    Duration = 3
                })
            else
                WindUI:Notify({
                    Title = "Config Error",
                    Content = "Config file not found",
                    Duration = 3
                })
            end
        end
    end
})

local filesDropdown
local function listConfigFiles()
    local files = {}
    local path = "WindUI/" .. Window.Folder .. "/config"
    if not isfolder(path) then
        makefolder(path)
    end
    for _, file in ipairs(listfiles(path)) do
        local name = file:match("([^/]+)%.json$")
        if name then table.insert(files, name) end
    end
    return files
end

filesDropdown = SettingsTab:Dropdown({
    Title = "Select Config",
    Values = listConfigFiles(),
    Multi = false,
    AllowNone = true,
    Callback = function(selection)
        configName = selection
    end
})

SettingsTab:Button({
    Title = "Refresh List",
    Callback = function()
        filesDropdown:Refresh(listConfigFiles())
    end
})

-- Select first tab on GUI open
Window:SelectTab(1)
